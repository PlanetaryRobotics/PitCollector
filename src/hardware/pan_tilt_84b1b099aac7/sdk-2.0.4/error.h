/*****************************************************************************
*****              (C)2014 FLIR Commercial Systems, Inc.                 *****
*****                       All Rights Reserved.                         *****
*****                                                                    *****
*****     This source data and code (the "Code") may NOT be distributed  *****
*****     without the express prior written permission consent from of   *****
*****     FLIR Commercial Systems, Inc. ("FLIR").  FLIR PROVIDES THIS    *****
*****     CODE ON AN "AS IS" BASIS FOR USE BY RECIPIENT AT ITS OWN       *****
*****     RISK.  FLIR DISCLAIMS ALL WARRANTIES, WHETHER EXPRESS, IMPLIED *****
*****     OR STATUTORY, INCLUDING WITHOUT LIMITATION ANY IMPLIED         *****
*****     WARRANTIES OF TITLE, NON-INFRINGEMENT OF THIRD PARTY RIGHTS,   *****
*****     MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.          *****
*****     FLIR Commercial Systems, Inc. reserves the right to make       *****
*****     changes without further notice to the Code or any content      *****
*****     herein including to improve reliability, function or design.   *****
*****     FLIR Commercial Systems, Inc. shall not assume any liability   *****
*****     arising from the application or use of this code, data or      *****
*****     function.                                                      *****
*****                                                                    *****
*****     FLIR Commercial Systems, Inc.                                  *****
*****     Motion Control Systems                                         *****
*****     www.flir.com/mcs                                               *****
*****     mcs-support@flir.com                                           *****
*****************************************************************************/
#ifndef CPI_ERROR_H
#define CPI_ERROR_H

/**
 * \file error.h
 * \brief Error code macros and definitions.
 *
 * Error codes can be generated locally (CPI) or remotely (PTU). The
 * codes have the same meaning on both systems. Errors generated remotely are
 * transformed locally! This means the codes are not an exact copy of a PTU
 * error code on the wire.
 *
 * Error codes are signed integers and ERR_OK is defined as zero. Since PTU
 * codes are transformed locally, you may redefine the transformation. Only the
 * base signed values are fixed.
 *
 * Errors are guaranteed to be negative:
 *
 * \code
 * if(error < 0){
 *     printf("Some error occured.\n");
 * }
 * if(error < CPI_ERR_OK){
 *     printf("This meanings the same thing: some error occured.\n");
 * }
 * \endcode
 *
 * Errors generated locally can be directly compared:
 *
 * if(error == CPI_ERR_TIMEOUT){
 *     printf("CPI timed out.\n");
 * }
 *
 * Errors can be masked to directly compare both local and remote:
 *
 * \code
 * if(CPI_EMASK(error) == CPI_ERR_TIMEOUT){
 *     printf("CPI or PTU timed out.\n");
 * }
 * \endcode
 *
 * Error sources can be checked conditionally as well:
 *
 * \code
 * if(CPI_EISPTU(error)){
 *     printf("error was generated by the PTU\n");
 * }
 * if(CPI_EISCPI(error)){
 *     printf("error was generated by the CPI\n");
 * }
 * \endcode
 *
 * Error sources are mutually exclusive:
 *
 * \code
 * if(CPI_EISPTU(error)){
 *     printf("PTU error!\n");
 *     if(CPI_EISCPI(error)){
 *         printf("This can never happen.\n");
 *      }
 * }
 * if(error < ERR_OK){
 *      if(CPI_EISPTU(error)){
 *         printf("PTU error!\n");
 *     } else {
 *         printf("CPI error!\n");
 *     }
 * }
 * \endcode
 */

/* Assume 16 bit signed ints to be nice to our embedded friends, even though
 * error codes can be up to 32 bits. Twos complement form is also assumed as
 * this is a fundamental requirnment of the CPI.
 *
 * EDBIT differentiates between local and remote errors.
 */
#define CPI_EDBIT_LOC           14
#define CPI_EDBIT               (1L << CPI_EDBIT_LOC)
/* make PTU error code (cond clear EDBIT) */
#define CPI_EMAKEPTU(error)     (-((error) < 0) & ((~ CPI_EDBIT) & (error)))
/** Map PTU and CPI errors to CPI error space. */
#define CPI_EMASK(error)        (-((error) < 0) & (CPI_EDBIT | (error)))
/** Non-zero (true) if error is a locally generated (CPI) error. */
#define CPI_EISCPI(error)       (CPI_EDBIT & (error))
/** Non-zero (true) if error is a remotely generated (PTU) error. */
#define CPI_EISPTU(error)       (!CPI_EISCPI(error))

/** OK. No error has occured. */
#define CPI_ERR_OK                                  0
/** General and generic error. */
#define CPI_ERR_GENERAL                             -1
/** Some argument is out of bounds. */
#define CPI_ERR_OUT_OF_BOUNDS                       -2
/** An axis (ex: Pan) failed or had some sort of fault. */
#define CPI_ERR_AXIS                                -3
/** Something is wrong with the vane sense. Check your hardware. */
#define CPI_ERR_VANE                                -4
/** Some argument is invalid. */
#define CPI_ERR_INVAL                               -5
/** Operation timed out. */
#define CPI_ERR_TIMEOUT                             -6
/** Operation failed. Try again. */
#define CPI_ERR_AGAIN                               -7
/** There wasn't enough memory. */
#define CPI_ERR_NO_MEM                              -8
/** Some prerequisite was not met. */
#define CPI_ERR_PREREQ                              -9
/** Read I/O failed. */
#define CPI_ERR_READ                                -10
/** Write I/O failed. */
#define CPI_ERR_WRITE                               -11
/** An internal callback took control. */
#define CPI_ERR_CB_NM                               -12
/** A callback failed. */
#define CPI_ERR_CB_FAIL                             -13
/** Base speed is too low. See acceleration table.*/
#define CPI_ERR_BASE_SPEED_TOO_LOW                  -14
/** The call was canceled. */
#define CPI_ERR_CANCELED                            -15
/** The move faulted. */
#define CPI_ERR_MOVE_FAULT                          -16
/** This command not allowed in Constant Velocity mode. */
#define CPI_ERR_ILLEGAL_IN_CV                       -17
/** This command is invalid with 0 speed. */
#define CPI_ERR_INVALID_WITH_0_SPEED                -18
/** Network unreachable. */
#define CPI_ERR_UNREACH                             -19
/** This command is illegal during stabilization (ISM). */
#define CPI_ERR_ILLEGAL_STAB                        -20
/** There was an error while programming gyro. */
#define CPI_ERR_PROGRAMMING_GYRO                    -21
/** A calculation did not converge. */
#define CPI_ERR_CONVERGE                            -22
/** GPM: not enough landmarks. */
#define CPI_ERR_NOT_ENOUGH_LANDMARKS                -23
/** This command is not yet implemented. */
#define CPI_ERR_NOT_IMPLEMENTED                     -24
/** This feature not enabled. */
#define CPI_ERR_NOT_ENABLED                         -25
/** This is an illegal command. */
#define CPI_ERR_ILLEGAL_CMD                         -26
/** The Pan-Tilt head cable is disconnected. */
#define CPI_ERR_CABLE_DISCON                        -27
/** There was no entry in table. */
#define CPI_ERR_NO_ENTRY                            -28
/** Continuous operation is not supported. */
#define CPI_ERR_CONTINUOUS_ILLEGAL                  -29
/** Illegal unit id. */
#define CPI_ERR_ILLEGAL_UNIT_ID                     -30
/** The PTU's state is corrupted. Defaults were restored. */
#define CPI_ERR_STATE_DEFAULTED                     -31
/** The PTU's state is corrupted, but the default restoration failed. */
#define CPI_ERR_STATE_DEFAULTED_SAVE_FAILED         -32
/** Invalid preset. */
#define CPI_ERR_INVALID_PRESET                      -33
/** An different error system is not mapped to this one. */
#define CPI_ERR_UNMAPPED_ERROR                      -34
/** This operation is illegal without axis limits. */
#define CPI_ERR_ILLEGAL_WO_LIMITS                   -35
/** The acceleration table is not big enough. */
#define CPI_ERR_ACCEL_TABLE_EXCEEDED                -36
/** This operation is illegal with continuous operation. */
#define CPI_ERR_ILLEGAL_W_CONTINUOUS                -37
/** We lost protocol syncronization. */
#define CPI_ERR_LOST_SYNC                           -38

#endif /* CPI_ERROR_H */

